// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewMetricSolution.DB.DBContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NewMetricSolution.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230525165947_Future")]
    partial class Future
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Departments.AccountingDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AccountingDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 2
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Logistic.DeliveryDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("LogisticsDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LogisticsDepartmentId")
                        .IsUnique();

                    b.ToTable("DeliveryDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 5,
                            LogisticsDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Logistic.StorageDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("LogisticsDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LogisticsDepartmentId")
                        .IsUnique();

                    b.ToTable("StorageDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 2,
                            LogisticsDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.LogisticsDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerServiceDepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerServiceDepartmentId")
                        .IsUnique();

                    b.ToTable("LogisticsDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerServiceDepartmentId = 1,
                            Employees = 7
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Sales.RetailSalesDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("SalesDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SalesDepartmentId")
                        .IsUnique();

                    b.ToTable("RetailSalesDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 2,
                            SalesDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Sales.WholesaleSalesDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("SalesDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SalesDepartmentId")
                        .IsUnique();

                    b.ToTable("WholesaleSalesDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 2,
                            SalesDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.SalesDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerServiceDepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerServiceDepartmentId")
                        .IsUnique();

                    b.ToTable("SalesDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerServiceDepartmentId = 1,
                            Employees = 4
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerServiceDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CustomerServiceDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 11
                        });
                });

            modelBuilder.Entity("Entities.Departments.Production.EngineeringDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDepartmentId")
                        .IsUnique();

                    b.ToTable("EngineeringDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 4,
                            ProductionDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.Production.PurchasingDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDepartmentId")
                        .IsUnique();

                    b.ToTable("PurchasingDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 1,
                            ProductionDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.Production.QualityControlDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionDepartmentId")
                        .IsUnique();

                    b.ToTable("QualityControlDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 2,
                            ProductionDepartmentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Departments.ProductionDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductionDepartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Employees = 7
                        });
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Logistic.DeliveryDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerService.LogisticsDepartment", null)
                        .WithOne("DeliveryDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.Logistic.DeliveryDepartment", "LogisticsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Logistic.StorageDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerService.LogisticsDepartment", null)
                        .WithOne("StorageDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.Logistic.StorageDepartment", "LogisticsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.LogisticsDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerServiceDepartment", null)
                        .WithOne("LogisticsDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.LogisticsDepartment", "CustomerServiceDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Sales.RetailSalesDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerService.SalesDepartment", null)
                        .WithOne("RetailSalesDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.Sales.RetailSalesDepartment", "SalesDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.Sales.WholesaleSalesDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerService.SalesDepartment", null)
                        .WithOne("WholesaleSalesDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.Sales.WholesaleSalesDepartment", "SalesDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.SalesDepartment", b =>
                {
                    b.HasOne("Entities.Departments.CustomerServiceDepartment", null)
                        .WithOne("SalesDepartment")
                        .HasForeignKey("Entities.Departments.CustomerService.SalesDepartment", "CustomerServiceDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.Production.EngineeringDepartment", b =>
                {
                    b.HasOne("Entities.Departments.ProductionDepartment", null)
                        .WithOne("EngineeringDepartment")
                        .HasForeignKey("Entities.Departments.Production.EngineeringDepartment", "ProductionDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.Production.PurchasingDepartment", b =>
                {
                    b.HasOne("Entities.Departments.ProductionDepartment", null)
                        .WithOne("PurchasingDepartment")
                        .HasForeignKey("Entities.Departments.Production.PurchasingDepartment", "ProductionDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.Production.QualityControlDepartment", b =>
                {
                    b.HasOne("Entities.Departments.ProductionDepartment", null)
                        .WithOne("QualityControlDepartment")
                        .HasForeignKey("Entities.Departments.Production.QualityControlDepartment", "ProductionDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.LogisticsDepartment", b =>
                {
                    b.Navigation("DeliveryDepartment");

                    b.Navigation("StorageDepartment");
                });

            modelBuilder.Entity("Entities.Departments.CustomerService.SalesDepartment", b =>
                {
                    b.Navigation("RetailSalesDepartment");

                    b.Navigation("WholesaleSalesDepartment");
                });

            modelBuilder.Entity("Entities.Departments.CustomerServiceDepartment", b =>
                {
                    b.Navigation("LogisticsDepartment");

                    b.Navigation("SalesDepartment");
                });

            modelBuilder.Entity("Entities.Departments.ProductionDepartment", b =>
                {
                    b.Navigation("EngineeringDepartment");

                    b.Navigation("PurchasingDepartment");

                    b.Navigation("QualityControlDepartment");
                });
#pragma warning restore 612, 618
        }
    }
}
